generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model OrgTable {
  id    String @id
  email String @unique
  name  String
  role  String @default("ORG") // ORG || ADMIN

  status    String    @default("ACTIVE") // ACTIVE || INACTIVE
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  Polls PollTable[]  @relation(name: "FK_Poll_Org")
  Users UserTable[]  @relation(name: "FK_User_Org")
  Votes VotesTable[] @relation(name: "FK_Vote_Org")

  @@index([status])
}

model UserTable {
  id          String @id
  orgId       String
  email       String @unique
  name        String
  password    String
  role        String @default("USER") // USER || ADMIN
  permissions String @default("") //CRUD

  status    String    @default("ACTIVE") // ACTIVE || INACTIVE
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  Org   OrgTable    @relation(name: "FK_User_Org", fields: [orgId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Polls PollTable[] @relation(name: "FK_Poll_User")

  @@index([status])
}

model RefreshTokenTable {
  id        String   @id
  familyId  String
  userId    String
  token     String
  createdAt DateTime
  expiresAt DateTime
  status    String   @default("GRANTED") //GRANTED || REVOKED

  @@index([familyId])
  @@map("RefreshTokens")
}

model PollTable {
  id        String   @id
  orgId     String
  userId    String
  name      String
  createdAt DateTime
  expiresAt DateTime
  status    String   @default("ACTIVE") // ACTIVE || INACTIVE

  iframeTitle String
  iframeSrc   String

  PollQuestions PollQuestionTable[] @relation(name: "FK_PollQuestion_Poll")
  Org           OrgTable            @relation(name: "FK_Poll_Org", fields: [orgId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User          UserTable           @relation(name: "FK_Poll_User", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Votes         VotesTable[]        @relation(name: "FK_Vote_Poll")

  @@unique([orgId, id])
}

model PollQuestionTable {
  id     String       @id
  orgId  String
  pollId String
  name   String
  Votes  VotesTable[] @relation(name: "FK_PollQuestionAnswer_PollQuestion")
  Poll   PollTable    @relation(name: "FK_PollQuestion_Poll", fields: [orgId, pollId], references: [orgId, id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([orgId, id])
}

model VotesTable {
  id             String @id
  orgId          String
  pollId         String
  pollQuestionId String
  fingerPrint    String

  ipAddress String?
  hostname  String?
  city      String?
  region    String?
  country   String?
  loc       String?
  org       String?
  postal    String?
  timezone  String?
  userAgent String?

  Poll         PollTable         @relation(name: "FK_Vote_Poll", fields: [pollId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PollQuestion PollQuestionTable @relation(name: "FK_PollQuestionAnswer_PollQuestion", fields: [pollQuestionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Org          OrgTable          @relation(name: "FK_Vote_Org", fields: [orgId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([orgId, fingerPrint])
}
